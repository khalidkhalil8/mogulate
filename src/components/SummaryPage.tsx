
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { Button } from "@/components/ui/button";
import Header from './Header';
import { IdeaData } from '@/lib/types';
import { toast } from '@/components/ui/sonner';
import ConfirmationDialog from './ui/ConfirmationDialog';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Separator } from '@/components/ui/separator';

interface SummaryPageProps {
  data: IdeaData;
  onReset: () => void;
}

const SummaryPage: React.FC<SummaryPageProps> = ({ data, onReset }) => {
  const [isResetDialogOpen, setIsResetDialogOpen] = useState(false);
  const navigate = useNavigate();
  
  const handleCopySummary = () => {
    const formattedCompetitors = data.competitors.map(comp => 
      `- ${comp.name} (${comp.website}): ${comp.description}`
    ).join('\n');
    
    const marketGapsAnalysis = data.marketGapAnalysis 
      ? `\n\nAI-Identified Market Gaps:\n${data.marketGapAnalysis.marketGaps.map(gap => `- ${gap}`).join('\n')}\n\nAI-Suggested Positioning:\n${data.marketGapAnalysis.positioningSuggestions.map(suggestion => `- ${suggestion}`).join('\n')}`
      : '';
    
    const summary = `
# IDEA SUMMARY

## Core Idea
${data.idea}

## Competitors
${formattedCompetitors}

## Market Gaps and Differentiation
${data.marketGaps}${marketGapsAnalysis}

## Validation Plan
${data.validationPlan}

Generated by TalonIQ
`;
    
    navigator.clipboard.writeText(summary).then(() => {
      toast.success('Summary copied to clipboard!');
    }).catch(() => {
      toast.error('Failed to copy summary');
    });
  };
  
  const handleResetConfirm = () => {
    onReset();
    setIsResetDialogOpen(false);
    navigate('/idea');
  };
  
  return (
    <div className="min-h-screen flex flex-col bg-white">
      <Header />
      
      <main className="flex-1 py-8 px-4">
        <div className="container-width max-w-3xl mx-auto">
          <div className="bg-white rounded-xl p-6 md:p-8">
            <h1 className="text-3xl md:text-4xl font-bold mb-2 text-center">
              Summary
            </h1>
            <p className="text-gray-600 text-center mb-8">
              Here is your idea and everything we found - ready to take action?
            </p>
            
            <div className="space-y-8">
              {/* Idea Section */}
              <Card>
                <CardHeader>
                  <CardTitle>Your Idea</CardTitle>
                </CardHeader>
                <CardContent>
                  <p>{data.idea}</p>
                </CardContent>
              </Card>
              
              {/* Competitors Section */}
              <Card>
                <CardHeader>
                  <CardTitle>Competitors ({data.competitors.length})</CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  {data.competitors.length > 0 ? (
                    data.competitors.map((competitor) => (
                      <div key={competitor.id} className="space-y-2">
                        <div className="flex items-start justify-between">
                          <div>
                            <h3 className="font-semibold">{competitor.name}</h3>
                            <a 
                              href={competitor.website.startsWith('http') ? competitor.website : `https://${competitor.website}`} 
                              target="_blank" 
                              rel="noopener noreferrer"
                              className="text-sm text-blue-600 hover:underline"
                            >
                              {competitor.website}
                            </a>
                          </div>
                          {competitor.isAiGenerated && (
                            <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-teal-100 text-teal-800">
                              AI Found
                            </span>
                          )}
                        </div>
                        <p className="text-gray-600 text-sm">{competitor.description}</p>
                        <Separator className="my-2" />
                      </div>
                    ))
                  ) : (
                    <p className="text-gray-500">No competitors identified</p>
                  )}
                </CardContent>
              </Card>
              
              {/* Market Gaps Section */}
              <Card>
                <CardHeader>
                  <CardTitle>Market Gaps & Differentiation</CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div>
                    <h3 className="font-medium mb-2">Your Approach:</h3>
                    <p className="text-gray-700">{data.marketGaps}</p>
                  </div>
                  
                  {data.marketGapAnalysis && (
                    <>
                      <Separator />
                      <div>
                        <h3 className="font-medium mb-2">AI-Identified Market Gaps:</h3>
                        <ul className="list-disc pl-5 space-y-2">
                          {data.marketGapAnalysis.marketGaps.map((gap, index) => (
                            <li key={index} className="text-gray-700">{gap}</li>
                          ))}
                        </ul>
                      </div>
                      
                      <div>
                        <h3 className="font-medium mb-2">AI-Suggested Positioning:</h3>
                        <ul className="list-disc pl-5 space-y-2">
                          {data.marketGapAnalysis.positioningSuggestions.map((suggestion, index) => (
                            <li key={index} className="text-gray-700">{suggestion}</li>
                          ))}
                        </ul>
                      </div>
                    </>
                  )}
                </CardContent>
              </Card>
              
              {/* Validation Plan Section */}
              <Card>
                <CardHeader>
                  <CardTitle>Validation Plan</CardTitle>
                </CardHeader>
                <CardContent>
                  <p>{data.validationPlan}</p>
                </CardContent>
              </Card>
              
              <div className="flex flex-col md:flex-row justify-between gap-4 pt-4">
                <Button 
                  onClick={handleCopySummary}
                  variant="outline" 
                  className="border-teal-500 text-teal-700 hover:bg-teal-50"
                >
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="18"
                    height="18"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    strokeWidth="2"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    className="mr-2"
                  >
                    <rect width="14" height="14" x="8" y="8" rx="2" ry="2"></rect>
                    <path d="M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2"></path>
                  </svg>
                  Copy Summary
                </Button>
                
                <Button 
                  onClick={() => setIsResetDialogOpen(true)}
                  className="gradient-bg border-none hover:opacity-90 button-transition"
                >
                  Enter a New Idea
                </Button>
              </div>
            </div>
          </div>
        </div>
      </main>
      
      <ConfirmationDialog
        isOpen={isResetDialogOpen}
        title="Start a New Idea?"
        description="Your data will not be saved if you enter a new idea. Please copy your summary if you wish to keep it!"
        confirmText="Continue"
        cancelText="Cancel"
        onConfirm={handleResetConfirm}
        onCancel={() => setIsResetDialogOpen(false)}
        variant="destructive"
      />
    </div>
  );
};

export default SummaryPage;
